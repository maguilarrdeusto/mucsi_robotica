import cv2
import numpy as np

# Lectura de imagen en tiempo real
cap = cv2.VideoCapture(0)

# Crea una ventana llamada 'VentanaCartas'.
cv2.namedWindow('VentanaCartas')
cv2.namedWindow('VentanaThresh')
cv2.namedWindow('VentanaCanny')

# Lee el primer fotograma de la cámara.
success, frame = cap.read() # Succes indica si la lectura fue exitosa.

# Diccionario para almacenar las ventanas activas por carta
active_windows = {}

# Bucle para mostrar el video en tiempo real.
while success and cv2.waitKey(1) == -1: 

    frame_with_lines = frame.copy()

    # Creamos una mascara basandonos en el frame original
    roi_frame = frame.copy()
    mask = np.zeros(frame.shape[:2], dtype=np.uint8)

    # Convertir la imagen a escala de grises
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Aplicar un filtro Gaussiano para reducir el ruido
    blurred = cv2.GaussianBlur(gray, (7, 7), 0)

    # Aplicar un umbral binario para segmentar la imagen, para separar blanco de negro
    ret, thresh = cv2.threshold(blurred, 127, 255, cv2.THRESH_BINARY_INV)

    # Encontrar los contornos en la imagen umbralizada
    contours, _ = cv2.findContours(thresh, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE) 

    # Ordenar los contornos por área de mayor a menor
    if contours:
        contours = sorted(contours, key=cv2.contourArea, reverse=True)

    # Eliminamos el contorno más grande, que representa el contorno de la propia ventana
    if contours:
        contours.pop(0)

    if len(contours) > 1:

        # Calculamos la media de aera de los contornos
        media = 0
        for contour in contours:
            media += cv2.contourArea(contour)
        media = media / len(contours)

        # Calculamos la desviación estandar
        desviacion = 0
        for contour in contours:
            desviacion += (cv2.contourArea(contour) - media) ** 2
        desviacion = (desviacion / len(contours)) ** 0.5

        # Eliminamos los contornos que no sean cartas
        contours = [contour for contour in contours if cv2.contourArea(contour) > media + 2 * desviacion]

        # Indicamos en la ventana el número de cartas que hay en la mesa
        cv2.putText(frame, "Numero de cartas: " + str(len(contours)), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # Si solo hay un contorno, no es necesario calcular la media y la desviación estándar, es la única carta
    else:
        cv2.putText(frame, "Numero de cartas: " + str(len(contours)), (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    # Obtener la cantidad de cartas actuales y actualizar las ventanas
    current_contour_ids = set(range(len(contours)))
    existing_contour_ids = set(active_windows.keys())

    # Cerrar ventanas de contornos que ya no están presentes
    for contour_id in existing_contour_ids - current_contour_ids:
        cv2.destroyWindow(active_windows[contour_id])
        del active_windows[contour_id]
    
    # Dibujar y mostrar la región de interés de cada carta detectada
    for idx, c in enumerate(contours):

        # Encontrar el área mínima
        rect = cv2.minAreaRect(c)

        # Calcular las coordenadas del rectángulo de área mínima
        box = cv2.boxPoints(rect)

        # Normalizar las coordenadas a enteros
        box = np.int32(box)

        # Dibujar contornos
        cv2.drawContours(thresh, [box], 0, (0,0, 255), 3)
        cv2.drawContours(frame, [box], 0, (0,0, 255), 3)

        # Extraer la región del box y mostrarla en una ventana separada
        x, y, w, h = cv2.boundingRect(box)
        box_region = frame[y:y+h, x:x+w]
        if box_region.size > 0:  # Verificar que el tamaño del contorno es válido
            window_name = f'Carta_{idx}'  # Nombre único para cada carta detectada
            active_windows[idx] = window_name

            # Posicionar la ventana en una ubicación diferente
            window_x = 100 + (idx % 5) * 600  # Espaciado horizontal entre ventanas aumentado
            window_y = 100 + (idx // 5) * 600  # Espaciado vertical entre filas aumentado
            cv2.moveWindow(window_name, window_x, window_y)

        # Extraer la región del box y mostrarla en una ventana separada
        x, y, w, h = cv2.boundingRect(box)
        box_region = thresh[y:y + h, x:x + w]

        if box_region.size > 0:  # Verificar que el tamaño del contorno es válido
            
            # Verificar el número de canales de la imagen
            if len(box_region.shape) == 3 and box_region.shape[2] == 3:

                # Convertir la imagen a escala de grises si tiene 3 canales (BGR)
                box_gray = cv2.cvtColor(box_region, cv2.COLOR_BGR2GRAY)

            else:
                # Si la imagen ya está en escala de grises, no es necesario convertirla
                box_gray = box_region

            # Aplicar un filtro Gaussiano para suavizar la imagen
            box_blurred = cv2.GaussianBlur(box_gray, (5, 5), 0)

            # Calcula valores dinámicos para los thresholds de Canny
            mean_intensity = np.mean(box_gray)
            low_threshold = max(30, int(mean_intensity * 0.5))
            high_threshold = min(150, int(mean_intensity * 1.5))

            # Aplicar el detector de bordes Canny
            canny_edges = cv2.Canny(box_gray, low_threshold, high_threshold)

            # Mostramos la ventana Canny
            cv2.imshow('VentanaCanny', canny_edges)

            # Aplicar una operación de cerrado morfológico para asegurar que los bordes estén bien cerrados
            kernel = np.ones((5, 5), np.uint8)
            closed = cv2.morphologyEx(canny_edges, cv2.MORPH_CLOSE, kernel)

            # Encontrar los contornos en la imagen de la región del box
            inner_contours, _ = cv2.findContours(closed, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)

            # Calcular el centro de la región del box y definir un rectángulo
            height, width = box_region.shape[:2]
            rect_width = int(width * 0.75)  # Ajustar el tamaño del rectángulo al 75% del ancho
            rect_height = int(height * 0.9)  # Ajustar el tamaño del rectángulo al 75% de la altura

            # Definir el rectángulo central (top-left y bottom-right)
            top_left = (width // 2 - rect_width // 2, height // 2 - rect_height // 2)
            bottom_right = (width // 2 + rect_width // 2, height // 2 + rect_height // 2)

            # Dibujar el rectángulo en la misma imagen donde se dibujarán los contornos
            cv2.rectangle(frame, (x + top_left[0], y + top_left[1]), (x + bottom_right[0], y + bottom_right[1]), (0, 255, 0), 2)

            # Filtrar contornos que están completamente dentro del rectángulo
            contours_in_rectangle = []
            for contour in inner_contours:
                inside_rectangle = True
                for point in contour:
                    if not (top_left[0] <= point[0][0] <= bottom_right[0] and top_left[1] <= point[0][1] <= bottom_right[1]):
                        inside_rectangle = False
                        break
                if inside_rectangle:
                    contours_in_rectangle.append(contour)

            # Calcular las áreas de los contornos filtrados
            areas = [(cv2.contourArea(contour), contour) for contour in contours_in_rectangle]

            # Ordenar los contornos por área, de mayor a menor
            areas = sorted(areas, key=lambda x: x[0], reverse=True)

            # Detectar un salto significativo en las áreas
            significant_contours = []
            if len(areas) > 0:
                prev_area = areas[0][0]
                significant_contours.append(areas[0])  # Agregar siempre el contorno más grande
                for i in range(1, len(areas)):
                    current_area = areas[i][0]
                    if current_area == 0:  # Evitar división por cero
                        continue  # Ignorar este contorno y pasar al siguiente
                    if prev_area / current_area > 2:  # Ajustar el factor según lo que se considere un "salto significativo"
                        cv2.drawContours(frame, [areas[i][1]], -1, (0, 255, 0), 3)  # Dibuja el contorno en verde
                        break  # Terminar cuando se detecta un cambio brusco
                    significant_contours.append(areas[i])
                    prev_area = current_area

            # Filtrar los contornos significativos
            filtered_contours = [contour for _, contour in significant_contours]

            # Contar cuántos contornos significativos hay
            count = len(filtered_contours)

            for contour in filtered_contours:
                contour[:, 0, 0] += x  # Desplazamiento en X
                contour[:, 0, 1] += y  # Desplazamiento en Y
                cv2.drawContours(frame, [contour], -1, (0, 0, 255), 3)

            # Dibujar texto en la parte superior del rectángulo
            text = f'Numero: {count}'

            font_scale = 1
            font_thickness = 2
            text_size = cv2.getTextSize(text, cv2.FONT_HERSHEY_SIMPLEX, font_scale, font_thickness)[0]
            text_width, text_height = text_size

            # Coordenadas para el texto y el punto verde
            text_x = x + top_left[0] + (rect_width // 2) - (text_width // 2)
            text_y = y + top_left[1] - 10  # Espacio por encima del rectángulo

            # Dibujar el texto
            cv2.putText(frame, text, (text_x, text_y), cv2.FONT_HERSHEY_SIMPLEX, font_scale, (255, 0, 0), font_thickness, cv2.LINE_AA)
        
    cv2.imshow('VentanaCartas', frame)  # Muestra el fotograma actual en la ventana.
    cv2.imshow('VentanaThresh', thresh)  # Muestra el fotograma actual en la ventana.

    success, frame = cap.read()  # Lee el siguiente fotograma de la cámara. 

# Liberar los recursos
cap.release()
cv2.destroyAllWindows()
